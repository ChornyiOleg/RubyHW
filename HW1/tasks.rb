
p 'Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.' # +


p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]" # Двойные кавычки используются для интерполяции в основном. Это не есть ошибка, но просто так принято.
p "int_arr.select.each_with_index { |_, i| i.even? }"
p "int_arr.select.each_with_index { |_, i| i.odd? }"
#(A.partition.with_index { |index| index.even?}).flatten
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110] 
p int_arr.select.each_with_index { |_, i| i.even? }
p int_arr.select.each_with_index { |_, i| i.odd? }
#(A.partition.with_index { |index| index.odd?}).flatten
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.select.each_with_index { |_, i| i.odd? }"
p "int_arr.select.each_with_index { |_, i| i.even? }"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.select.each_with_index { |_, i| i.odd? }
p int_arr.select.each_with_index { |_, i| i.even? }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному
 неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.index { |i| int_arr[0] < i && i < int_arr[-1] } || []"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.index { |i| int_arr[0] < i && i < int_arr[-1] } || []
# A.index { |element| A[0] < element && < A[-1] } || []
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному
 неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.index(int_arr.select { |i| int_arr[0] < i && i < int_arr[-1] }.last) || []"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.index(int_arr.select { |i| int_arr[0] < i && i < int_arr[-1] }.last) || []
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент. Первый и последний элементы массива не изменять.' 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.even? ? e + int_arr[0] : e }"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.even? ? e + int_arr[0] : e }
# A.map { |element| element.even? && (element != A[0] && != A[-1]) ? element + A.first : element}
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.' 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.even? ? e + int_arr[0] : e }"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.even? ? e + int_arr[-1] : e }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент. Первый и последний элементы массива не изменять.' 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.odd? ? e + int_arr[-1] : e }"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.odd? ? e + int_arr[-1] : e } #
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент. Первый и последний элементы массива не изменять.' 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]"
p "int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.odd? ? e + int_arr[0] : e }"
p int_arr = [7, 2, 9, 3, 55, 89, 45, 44, 367, 18, 23, 110]
p int_arr.map! { |e| e != int_arr[0] && e != int_arr[-1] && e.odd? ? e + int_arr[0] : e }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все положительные элементы на значение минимального.' # 
p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.map { |e| e.positive? ? int_arr.min : e }"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.map { |e| e.positive? ? int_arr.min : e }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все положительные элементы на значение максимального.' # 

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.map { |e| e.positive? ? int_arr.max : e }"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.map { |e| e.positive? ? int_arr.max : e }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.' # 

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.map { |e| e.negative? ? int_arr.min : e }"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.map { |e| e.negative? ? int_arr.min : e } # 
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.' # 
p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.map { |e| e.negative? ? int_arr.max : e }"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.map { |e| e.negative? ? int_arr.max : e } 
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.roate"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.rotate
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.roate"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.rotate(-1)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Проверить, образуют ли элементы арифметическую прогрессию. Если да, то вывести разность прогрессии, если нет - вывести nil.' # +

p "int_array = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36]"
p "progression_diff = int_array.each_cons(2).map { |el| el[1] - el[0] }.uniq"
p "progression_diff.size > 1 ? nil : progression_diff[0]"
p int_array = [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36]
p progression_diff = int_array.each_cons(2).map { |el| el[1] - el[0] }.uniq
p progression_diff.size > 1 ? nil : progression_diff[0]

p 'Вариант 2 с первым массивом:'

p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p progression_diff = int_arr.each_cons(2).map { |el| el[1] - el[0] }.uniq
p progression_diff.size > 1 ? nil : progression_diff[0]
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Проверить, образуют ли элементы геометрическую прогрессию. Если да, то вывести знаменатель прогрессии, если нет - вывести nil.' # +

p "int_arr = [3, 9, 27, 81, 243]"
p "if int_arr.include?(0)"
p "Array contains 0, check is iterrupted"
p "else"
p "progression_diff = int_arr.each_cons(2).map { |el| el[1] / el[0] }.uniq"
p "progression_diff.size > 1 ? nil : progression_diff[0]"
p "end"
p int_arr = [3, 9, 27, 81, 243]

if int_arr.include?(0)
  p "Array contains 0, check is interrupted"
else
  p progression_diff = int_arr.each_cons(2).map { |el| el[1] / el[0] }.uniq
  p progression_diff.size > 1 ? nil : progression_diff[0]
end

p 'Вариант 2 с элементом 0:'

p int_arr = [3, 0, 27, 81, 243]

if int_arr.include?(0)
  p "Array contains 0, check is interrupted" 
else
  p progression_diff = int_arr.each_cons(2).map { |el| el[1] / el[0] }.uniq
  p progression_diff.size > 1 ? nil : progression_diff[0]
end
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество его локальных максимумов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "counter = 0"
p "int_arr.each_cons(3) { |a,b,c| counter += 1 if a < b && b > c }"
p "counter"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
  counter = 0
  int_arr.each_cons(3) { |a,b,c| counter += 1 if a < b && b > c } # 
p counter
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество его локальных минимумов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "counter = 0"
p "int_arr.each_cons(3) { |a,b,c| counter += 1 if a > b && b < c }"
p "counter"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
  counter = 0
  int_arr.each_cons(3) { |a,b,c| counter += 1 if a > b && b < c } 
p counter
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти максимальный из его локальных максимумов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "maximus = []"
p "int_arr.each_cons(3) { |a, b, c| maximus << b if a < b && b > c }"
  int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
  maximus = []
  int_arr.each_cons(3) { |a, b, c| maximus << b if a < b && b > c }
p maximus.max
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти минимальный из его локальных минимумов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "minimus = []"
p "int_arr.each_cons(3) { |a, b, c| minimus << b if a > b && b < c }"
  int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
  minimus = []
  int_arr.each_cons(3) { |a, b, c| minimus << b if a > b && b < c }
p minimus.min
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Упорядочить его по возрастанию.' # 

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.sort"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.sort
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Упорядочить его по убыванию.' # 

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.sort { |a, b| b <=> a }"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.sort { |a, b| b <=> a }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти индекс минимального элемента.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.index(int_arr.min)"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.index(int_arr.min)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти индекс максимального элемента.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "int_arr.index(int_arr.max)"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p int_arr.index(int_arr.max)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют убывающую последовательность.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "(0...int_arr.size).sort_by{ |i| int_arr[i] }.reverse"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p (0...int_arr.size).sort_by{ |i| int_arr[i] }.reverse
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют возрастающую последовательность.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]"
p "(0...int_arr.size).sort_by{ |i| int_arr[i] }"
p int_arr = [7, 2, 9, 3, 55, 89, -45, 44, 367, -18, 23, 110]
p (0...int_arr.size).sort_by{ |i| int_arr[i] }
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти индекс первого минимального элемента.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.index(int_arr.min)"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.index(int_arr.min)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти индекс первого максимального элемента.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.index(int_arr.max)"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.index(int_arr.max)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти индекс последнего минимального элемента.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.rindex(int_arr.min)"
p int_arr = [7, 367, 9, -44, 55, 89, 45, -43, 366, -18, 23, 110]
p int_arr.rindex(int_arr.min)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти индекс последнего максимального элемента.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.rindex(int_arr.max)"
p int_arr = [7, 367, 9, -44, 55, 89, 45, -43, 366, -18, 23, 110]
p int_arr.rindex(int_arr.max)
p '--------------------------------------------------------------------------------'

p 'Дано целое число. Найти сумму его цифр.' # +

p "23"
p "23.digits.sum"
p 23.digits.sum
p '--------------------------------------------------------------------------------'

p 'Дано целое число. Найти произведение его цифр.' # +

p "23"
p 23.digits.inject(:*)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr[a..b].min"
p "int_arr[2..5].min"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr[2..5].min
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]" # +
p "int_arr[a..b].max"
p "int_arr[2..5].max"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr[2..5].max
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти все четные элементы.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:even?)"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:even?)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти все нечетные элементы.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:odd?)"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:odd?)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество четных элементов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:even?).count"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:even?).count
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество нечетных элементов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:odd?).count"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:odd?).count
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти два наибольших элемента.' 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.max(2)"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.max(2)
#p "worse version"
#p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
#p "int_arr.sort.uniq.last 2"
#p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
#p int_arr.sort.uniq.last 2
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти два наименьших элемента.'

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.min(2)"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.min(2)
#p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
#p "int_arr.sort.uniq.first 2"
#p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
#p int_arr.sort.uniq.first 2
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти минимальный четный элемент.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:even?).min"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:even?).min
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти максимальный четный элемент.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:even?).max"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:even?).max
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти минимальный нечетный элемент.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:odd?).min"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:odd?).min
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти максимальный нечетный элемент.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:odd?).max"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:odd?).max
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти минимальный положительный элемент' # + 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:positive?).min"
p int_arr = [7, 2, 9, 0, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:positive?).min
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти максимальный отрицательный элемент.' # + 

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.select(&:negative?).max"
p int_arr = [7, 2, 9, 0, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.select(&:negative?).max
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество минимальных элементов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.count(int_arr.min)"
p int_arr = [7, 2, 9, 0, 55, 89, 45, -44, 367, -18, 23, 110, -44, 367]
p int_arr.count(int_arr.min)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество максимальных элементов.' # +

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.count(int_arr.max)"
p int_arr = [7, 2, 9, 0, 55, 89, 45, -44, 367, -18, 23, 110, -44, 367]
p int_arr.count(int_arr.max)
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти среднее арифметическое его элементов.'
 
p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.sum / int_arr.size"
p  int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p  int_arr.sum / int_arr.size
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти среднее арифметическое модулей его элементов.' #

p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.map(&:abs).sum / int_arr.size"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.map(&:abs).sum / int_arr.size
p '--------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти среднее арифметическое квадратов его элементов.' # 
p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
p "int_arr.map { |e| e * e }.sum / int_arr.size"
p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
p int_arr.map { |e| e * e }.sum / int_arr.size
p '--------------------------------------------------------------------------------'

# Все очень неплохо. Грешишь уймой пустых строк. У меня на проекте за этим очень следят.
# Пустые строки ставят, когда нужно отделить логику в каком-то методе для читабельности.
# Ну, или в твоем случае, отделить условие от решения. Лучше записать вот так. Например:

# p 'Дан целочисленный массив. Найти максимальный нечетный элемент.'

# p "int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]"
# p "int_arr.select(&:odd?).max"
# p int_arr = [7, 2, 9, 3, 55, 89, 45, -44, 367, -18, 23, 110]
# p int_arr.select(&:odd?).max
# p '--------------------------------------------------------------------------------'
